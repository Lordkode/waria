name: Backend Deploy to GCP

on:
  workflow_call:  # Pour √™tre appel√© par un autre workflow
  push:
    branches: [ prod ]  # D√©clenchement automatique sur push vers prod
    paths:
      - 'backend/**'    # Uniquement si des changements sont d√©tect√©s dans le dossier backend

# D√©finir les permissions n√©cessaires (minimum requis)
permissions:
  contents: read
  id-token: write  # N√©cessaire pour l'authentification GCP avec Workload Identity

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Emp√™che les jobs bloqu√©s de s'ex√©cuter ind√©finiment
    defaults: 
      run: 
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Utilisation de la derni√®re version

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Utilisation de la derni√®re version
        with:
          node-version: 20
          cache: 'npm'  # Activation du cache pour acc√©l√©rer les builds
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci  # Utilise npm ci pour une installation plus rapide et coh√©rente

      - name: Run tests
        run: npm test
        continue-on-error: false  # Arr√™te le workflow si les tests √©chouent

      - name: Build project
        run: npm run build

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2  # M√©thode d'authentification plus r√©cente et s√©curis√©e
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Extract short SHA for version tag
        id: vars
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        env:
          IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/backend
        run: |
          # Ajouter une date et heure pour versioning
          VERSION_TAG=$(date +'%Y%m%d-%H%M%S')-${{ steps.vars.outputs.SHORT_SHA }}
          
          echo "Building Docker image with tag: $VERSION_TAG"
          docker build -t ${IMAGE_NAME}:$VERSION_TAG -t ${IMAGE_NAME}:latest .
          
          echo "Pushing Docker image to Artifact Registry"
          docker push ${IMAGE_NAME}:$VERSION_TAG
          docker push ${IMAGE_NAME}:latest
          
          # Enregistrer le tag pour l'utiliser √† l'√©tape de d√©ploiement
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          echo "Deploying version $VERSION_TAG to Cloud Run..."
          
          DEPLOY_OUTPUT=$(gcloud run deploy backend-service \
            --image=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY }}/backend:$VERSION_TAG \
            --platform=managed \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production" \
            --tag=$VERSION_TAG \
            --format="value(status.url)")
          
          if [ $? -eq 0 ]; then
            echo "SERVICE_URL=$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
            echo "‚úÖ D√©ploiement r√©ussi!"
          else
            echo "‚ùå √âchec du d√©ploiement"
            exit 1
          fi

      - name: Post-deployment verification
        run: |
          echo "üöÄ Backend d√©ploy√© avec succ√®s vers Cloud Run!"
          echo "URL du service: ${{ steps.deploy.outputs.SERVICE_URL }}"
          echo "Version d√©ploy√©e: $VERSION_TAG"
          
          # V√©rification basique du service
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.SERVICE_URL }}/health || echo "failed")
          if [[ $HTTP_STATUS == "200" ]]; then
            echo "‚úÖ Le service r√©pond correctement (HTTP 200)"
          else
            echo "‚ö†Ô∏è Le service r√©pond avec un code HTTP $HTTP_STATUS"
            echo "V√©rifiez les logs pour plus d'informations"
          fi